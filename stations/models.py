from json import loads
import pymongo

#TO DO:
#   - put and delete methods in the views.py file are outdated and need to be updated to the new methods (weathers/views.py)
#   - Test update a specific weather station longitude and latitude (single) (and screencap the result)
#   - Remove the long comment (below)
#   - Check that all the methods are standardised between files (more important for this one)
# Stations:
# 		- Tasks:
# 			- Insert a new weather station (single) -- DONE
# 			- Update a specific weather station longitude and latitude (single) -- DONE
# 		- Methods: 			
# 			- Post:			
# 				- Input JSON: {new weather station} -- DONE
# 				- Output JSON: {success / fail}	-- DONE
# 			- PATCH:
# 				- Input JSON: {weather station & new values} -- DONE
# 				- Output JSON: {success / fail} -- DONE
# 			    - URL = localhost:8000/stations/     JSON = {bulk=false&search_terms={"StationName": "Station X"}&new={"$set": {"Longitude": 123.45, "Latitude": -37.78}}}
# 		- Triggers:
# 			- If there are not enough weather stations per state, add dummy data	-- DONE 

client = pymongo.MongoClient("mongodb+srv://testUser:testPassword@nasadata.dpq7x0s.mongodb.net/test")
db = client['weatherDataDB']
coll = db['stations']

def station(json_object):
    new_record = {}
    for key in json_object:
        new_record[key] = json_object[key]
    return new_record

def find(limit):
    return coll.find().limit(int(limit))

def create(new):
    return coll.insert_one(station(new))

def update(search_terms, new):
    return coll.update_one(search_terms, new)

''' GENERATED BY CHATGPT

def create(request):
    # Parse the request body as JSON
    json_object = loads(request.body.decode("utf-8"))

    # Insert the new station into the database
    result = coll.insert_one(station(json_object))

    # Call the trigger to check if dummy data needs to be added
    check_stations_per_state()

    # Return a success or fail message as JSON
    if result.inserted_id:
        return JsonResponse({"success": True})
    else:
        return JsonResponse({"success": False})

def update(request):
    # Parse the request parameters as JSON
    search_terms = loads(request.GET.get("search_terms"))
    new_values = loads(request.GET.get("new"))

    # Update the specified station in the database
    result = coll.update_one(search_terms, new_values)

    # Call the trigger to check if dummy data needs to be added
    check_stations_per_state()

    # Return a success or fail message as JSON
    if result.modified_count:
        return JsonResponse({"success": True})
    else:
        return JsonResponse({"success": False})
'''

''' GENERATED BY CHATGPT

def check_stations_per_state():
    # Define the minimum number of stations per state
    min_stations_per_state = 5

    # Get a list of all the states in the database
    states = coll.distinct("state")

    # Loop through each state and check if there are enough stations
    for state in states:
        stations_count = coll.count_documents({"state": state})
        if stations_count < min_stations_per_state:
            # Add dummy stations to reach the minimum count
            for i in range(min_stations_per_state - stations_count):
                dummy_station = {
                    "Device ID": f"dummy_{state}_{i}",
                    "Latitude": 0,
                    "Longitude": 0,
                    "state": state,
                    "Device Name": "Dummy Station"
                }
                coll.insert_one(station(dummy_station))
'''

def delete(search_terms):
    return coll.delete_one(search_terms)

def station_trigger():
    count = coll.count_documents({})
    if count < 10:
        for i in range(10 - count):
            dummy = {
                        "Device ID": "00_" + str(i),
                        "Latitude": 0,
                        "Longitude": 0,
                        "state": "NSW",
                        "Device Name": "Dummy Station"
                    }
            coll.insert_one(station(dummy))

